parameters:
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply"
    type: string
    values:
      - major
      - minor
      - patch
      - skip
    default: patch
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod

variables:
  NODE_VERSION: '14.19.0'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

  APICONFIG_BASEPATH_VERSION: '/v1'

  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION_STORAGE_ACCOUNT)
    BLOB_CONTAINER: $(BLOB_CONTAINER_NAME)
    RESOURCE_GROUP: $(DEV_RESOURCE_GROUP_AZURE)
    CDN_ENDPOINT: $(DEV_ENDPOINT_AZURE)
    CDN_PROFILE: $(DEV_PROFILE_NAME_CDN_AZURE)
    STORAGE_ACCOUNT_NAME: $(DEV_STORAGE_ACCOUNT_NAME)
    APICONFIG_HOST: $(DEV_APICONFIG_API_HOST)
    APICONFIG_BASEPATH: $(APIM_BASEPATH_APICONFIG)$(APICONFIG_BASEPATH_VERSION)
    APICONFIG_REDIRECT_URI: $(DEV_APICONFIG_REDIRECT_URI)
    APICONFIG_CLIENT_ID: $(DEV_APICONFIG_CLIENT_ID)

  ${{ if eq(parameters['ENV'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION_STORAGE_ACCOUNT)
    BLOB_CONTAINER: $(BLOB_CONTAINER_NAME)
    RESOURCE_GROUP: $(UAT_RESOURCE_GROUP_AZURE)
    CDN_ENDPOINT: $(UAT_ENDPOINT_AZURE)
    CDN_PROFILE: $(UAT_PROFILE_NAME_CDN_AZURE)
    STORAGE_ACCOUNT_NAME: $(UAT_STORAGE_ACCOUNT_NAME)
    APICONFIG_HOST: $(UAT_APICONFIG_API_HOST)
    APICONFIG_BASEPATH: $(APIM_BASEPATH_APICONFIG)$(APICONFIG_BASEPATH_VERSION)
    APICONFIG_REDIRECT_URI: $(UAT_APICONFIG_REDIRECT_URI)
    APICONFIG_CLIENT_ID: $(UAT_APICONFIG_CLIENT_ID)

  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION_STORAGE_ACCOUNT)
    BLOB_CONTAINER: $(BLOB_CONTAINER_NAME)
    RESOURCE_GROUP: $(PROD_RESOURCE_GROUP_AZURE)
    CDN_ENDPOINT: $(PROD_ENDPOINT_AZURE)
    CDN_PROFILE: $(PROD_PROFILE_NAME_CDN_AZURE)
    STORAGE_ACCOUNT_NAME: $(PROD_STORAGE_ACCOUNT_NAME)
    APICONFIG_HOST: $(PROD_APICONFIG_API_HOST)
    APICONFIG_BASEPATH: $(APIM_BASEPATH_APICONFIG)$(APICONFIG_BASEPATH_VERSION)
    APICONFIG_REDIRECT_URI: $(PROD_APICONFIG_REDIRECT_URI)
    APICONFIG_CLIENT_ID: $(PROD_APICONFIG_CLIENT_ID)
  # github action use 'merge' as value of SourceBranchName
  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: ${{ variables['Build.SourceBranchName'] }}

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'io-azure-devops-github-ro'

stages:
  # Create a release on Github
  - stage: release_service
    # bump version if SEMVER is not 'skip'
    condition: ne('${{ parameters.SEMVER }}', 'skip')
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: release_service
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
              gitReference: $(SOURCE_BRANCH)

          - template: azure-templates/node-versioning.yml
            parameters:
              semver: '${{ parameters.SEMVER }}'
              release_branch: $(SOURCE_BRANCH)
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)

  # Prepare Artifact with application bundle
  - stage: prepare_artifact
    condition: not(failed('release_service'))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: 'make_build'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Release stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - script: yarn generate
            displayName: 'Generate API client'

          - bash: |
              echo 'APICONFIG_HOST: $(APICONFIG_HOST)'
              echo 'APICONFIG_BASEPATH: $(APICONFIG_BASEPATH)'
              chmod +x env.sh && . ./env.sh
            env:
              APICONFIG_HOST: $(APICONFIG_HOST)
              APICONFIG_BASEPATH: $(APICONFIG_BASEPATH)
              APICONFIG_CLIENT_ID: $(APICONFIG_CLIENT_ID)
              APICONFIG_REDIRECT_URI: $(APICONFIG_REDIRECT_URI)
            displayName: 'Generate env config file'

          - script: yarn build
            displayName: 'Build'

          - publish: $(System.DefaultWorkingDirectory)/build/release
            artifact: Bundle

  # Deploy on Azure
  - stage: deploy_staging
    condition: not(failed('prepare_artifact'))
    jobs:
      - job: 'deploy_to_container'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          # to check why azurefilecopy@4 https://github.com/microsoft/azure-pipelines-tasks/issues/13159
          - task: AzureFileCopy@3
            displayName: 'Deploy to container blob'
            inputs:
              sourcePath: '$(Pipeline.Workspace)/Bundle'
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              destination: 'azureBlob'
              storage: '$(STORAGE_ACCOUNT_NAME)'
              containerName: '$(BLOB_CONTAINER)'

#          - task: AzureCLI@1
#            displayName: 'Deploy to container blob'
#            inputs:
#              azureSubscription: $(AZURE_SUBSCRIPTION)
#              scriptLocation: inlineScript
#              inlineScript: |
#                call az storage blob sync --container $(BLOB_CONTAINER) --account-name $(STORAGE_ACCOUNT_NAME) -s "$(Pipeline.Workspace)\Bundle" -d .

  - stage: purge_cdn
    condition: not(failed('deploy_staging'))
    jobs:
      - job: 'purge_cdn'
        steps:
          - task: AzureCLI@1
            displayName: 'Purge CDN'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                call az cdn endpoint purge -g $(RESOURCE_GROUP) -n $(CDN_ENDPOINT) --profile-name $(CDN_PROFILE) --content-paths "/*"

  # Check that the staging instance is healthy
#  - stage: Healthcheck
#    dependsOn:
#      - deploy_staging
#    jobs:
#      - job: 'do_healthcheck'
#        steps:
#          - template: templates/rest-healthcheck/template.yaml@pagopaCommons
#            parameters:
#              azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
#              endpoint: 'https://$(ENDPOINT_AZURE).azureedge.net/$(MY_INDEX)'
#              endpointType: 'public'
#              appName: ''
#              containerInstanceResourceGroup: ''
#              containerInstanceVNet: ''
#              containerInstanceSubnet: ''
